#!/usr/bin/env zx

$.verbose = false;

function latestVersion(versions) {
  versions.sort((a, b) => {
    const versionA = a.split(".").map(Number);
    const versionB = b.split(".").map(Number);
    for (let i = 0; i < 3; i++) {
      if (versionA[i] !== versionB[i]) {
        return versionB[i] - versionA[i];
      }
    }
    return 0;
  });
  return versions[0] ?? null;
}

const cache = {};
async function getChart(repos, chart) {
  if (cache[chart]) {
    return cache[chart];
  }

  let results = {};

  for (const repo of repos) {
    try {
      const result = await $`helm show chart ${repo}/${chart}`;
      const info = result.stdout;
      if (info) {
        results[repo] = info
          .split("\n")
          .filter(Boolean)
          .reduce((o, l) => {
            const [key, value] = l.split(":");
            o[key.trim()] = value.trim();
            return o;
          }, {}).version;
      }
    } catch (error) {}
  }

  cache[chart] = results;

  return results;
}

async function getRepos() {
  const result = await $`helm search repo -o json`;
  const json = JSON.parse(result.stdout);
  return json;
}

async function getCharts() {
  const result = await $`helm list -o json`;

  const json = JSON.parse(result.stdout);

  const charts = json.map((chart) => {
    const chartSplits = chart.chart.split("-");
    const version = chartSplits.pop();
    const name = chartSplits.join("-");
    return {
      name: chart.name,
      chart: name,
      version: version,
    };
  });

  return charts;
}

const charts = await spinner("Getting chart versions...", getCharts);

const repos = await spinner("Getting repos...", getRepos);

const list = charts
  .filter(
    (chart) =>
      repos.filter((repo) => repo.name.endsWith(`/${chart.chart}`)).length > 0
  )
  .map((chart) => {
    const versions = repos
      .filter((repo) => repo.name.endsWith(`/${chart.chart}`))
      .reduce((o, repo) => {
        const [name] = repo.name.split("/");
        o[name] = repo.version;
        return o;
      }, {});

    const latest = latestVersion(Object.values(versions));
    let name = chart.name;
    if (chart.name !== chart.chart) {
      name += ` (${chart.chart})`;
    }
    return { name, version: chart.version, latest, ...versions };
  });

const notFound = list.filter((chart) => !chart.latest);
const outdated = list.filter(
  (chart) => chart.version !== chart.latest && chart.latest
);
const others = list.filter(
  (chart) => !outdated.includes(chart) && chart.latest
);

console.log(chalk.green.bold("Up to date charts:"));
console.table(others);
console.log(chalk.red.bold("Outdated charts:"));
console.table(outdated);
